// Code generated by go-bindata. DO NOT EDIT.
// sources:
// character.html

package character


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataCharacterhtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x96\xc1\x6e\xda\x4c\x10\x80\xef\x3c\xc5\xfe\x7b\xfe\x81\xf6\xd6\x83" +
	"\x6d\x29\xa2\xa9\xda\x43\xda\x48\x24\x52\x7b\x1c\xd6\x93\xec\x28\xeb\x35\xdd\x19\x0c\x11\xe2\xdd\xab\xc5\x24\x05" +
	"\xb2\xa9\x6d\xb8\xc0\xce\xcc\x37\xde\xcf\x1a\xbc\xce\xfe\xfb\xfc\x63\x76\xf7\xeb\xf6\x5a\x59\xa9\x5c\x31\xca\xe2" +
	"\x97\x72\xe0\x1f\x73\x8d\x5e\x17\xa3\x51\x66\x11\xca\x62\xa4\x94\x52\x59\x85\x02\xca\x58\x08\x8c\x92\xeb\xfb\xbb" +
	"\x2f\xe3\x4f\xfa\x38\xe5\xa1\xc2\x5c\x37\x84\xeb\x65\x1d\x44\x2b\x53\x7b\x41\x2f\xb9\x5e\x53\x29\x36\x2f\xb1\x21" +
	"\x83\xe3\xfd\xe2\x7f\x45\x9e\x84\xc0\x8d\xd9\x80\xc3\xfc\xe3\xe4\xc3\x49\x2b\x2b\xb2\x1c\xe3\xef\x15\x35\xb9\xfe" +
	"\x39\xbe\xbf\x1a\xcf\xea\x6a\x09\x42\x0b\x87\x47\x7d\x09\x73\x2c\x1f\xf1\x85\x14\x12\x87\xc5\xcc\x42\x00\x23\x18" +
	"\xb2\x69\x1b\x68\x93\x8e\xfc\x93\x0a\xe8\x72\xcd\xf2\xec\x90\x2d\xa2\x68\x65\x03\x3e\x1c\x22\x13\xc3\xac\x8b\x51" +
	"\x36\x6d\x8d\x47\xd9\xa2\x2e\x9f\x0f\x30\xa3\x11\xaa\xbd\x32\x0e\x98\x73\x1d\x45\x0f\x17\x8d\x9f\xed\x76\xf2\x1d" +
	"\x2a\xdc\xed\xda\xe2\xe9\xa1\x3a\xcd\xda\xe5\x11\x99\xf1\x12\x5e\x33\x66\x15\x02\x7a\xd1\xc5\x76\x3b\x99\xb5\xbf" +
	"\xbf\xde\xee\x76\xd9\x34\x16\xbd\xc3\xb0\x03\xb6\xba\x98\xfe\xb3\xa8\x82\xcd\xbe\xe9\x0d\x6c\xce\x1b\x76\x6c\x96" +
	"\x97\x88\xe5\x7b\xfb\x6d\xc0\xad\x70\xdf\x78\x1e\xcb\x5e\x1b\x9f\x14\xad\x3c\x89\x2e\x1e\x64\xc0\x45\xdb\xc9\x10" +
	"\x6a\x4e\xef\x31\xd3\xa3\x57\x93\x6f\xaf\xc9\x7e\xb7\x9b\x05\x84\x8f\x0d\x4a\x6a\x5e\x72\x0b\x57\x9b\x27\xc5\x12" +
	"\x8e\xf2\xe7\x35\x6c\xea\xd0\x4a\x5e\x2d\xc8\x91\x3c\xcf\x63\x80\x27\x2c\x21\x0a\x97\xd4\xbc\xcf\x56\x75\x19\xc9" +
	"\x76\xe3\x37\x75\xd9\x0b\x62\x68\xf0\x2f\x35\x87\x06\x93\xd8\xf9\xf2\x8d\x56\x89\x9b\x0b\xb4\x4a\xdc\x0c\xd7\xea" +
	"\x03\x25\xb4\x52\x58\xa7\x96\xa9\xfd\x05\x5a\xa6\xf6\xc3\xb5\xfa\x40\x09\xad\x14\xd6\xa9\x45\xf1\x7f\x3f\x58\x8b" +
	"\xbc\x0c\xd7\xea\x03\x25\xb4\x52\x58\xa7\xd6\x9a\xf8\x02\xad\x35\xf1\x70\xad\x3e\x50\x42\x2b\x85\x75\x0f\xa1\x85" +
	"\x4b\x86\xd0\xc2\x05\x43\xd8\x03\x4a\x0d\x61\x02\x3b\x5a\x76\x3d\x34\x9f\xc8\x39\x3e\x3d\xe1\xe6\x31\x76\x07\x0b" +
	"\x37\xe0\xc1\xbb\x3a\xef\xb1\x8f\xf5\xe3\x71\x23\x01\x4e\xf1\xeb\x18\x7a\x4b\x67\xd3\xf6\xa4\x8e\x47\x77\x7c\x8b" +
	"\xf9\x13\x00\x00\xff\xff\x3b\x80\x4a\x41\xd5\x08\x00\x00")

func bindataCharacterhtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataCharacterhtml,
		"character.html",
	)
}



func bindataCharacterhtml() (*asset, error) {
	bytes, err := bindataCharacterhtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "character.html",
		size: 2261,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1556671148, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"character.html": bindataCharacterhtml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"character.html": {Func: bindataCharacterhtml, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
