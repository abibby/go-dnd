// Code generated by go-bindata. DO NOT EDIT.
// sources:
// character.html

package character


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataCharacterhtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x95\xc1\x6e\xdb\x30\x0c\x86\xef\x7e\x0a\x4d\xe7\xd9\xde\x6e\x3b\xd8" +
	"\x06\x8a\xac\xc3\x76\xe8\x56\xa0\x2d\xb0\x1d\x15\x89\xad\x88\xca\xb2\x27\x32\x4e\x8a\x20\xef\x3e\xa8\x4e\x03\x27" +
	"\x75\xe6\x36\xc9\x25\x11\xc9\xff\xd7\x47\x81\x91\x8a\x0f\x5f\x7f\xcd\x6e\xff\x5c\x5f\x0a\xcb\xb5\xab\x92\x22\x7e" +
	"\x09\xa7\xfc\x43\x29\xc1\xcb\x2a\x49\x0a\x0b\xca\x54\x89\x10\x42\x14\x35\xb0\x12\xda\xaa\x40\xc0\xa5\xbc\xbb\xfd" +
	"\x96\x7e\x91\xc3\x94\x57\x35\x94\xb2\x43\x58\xb6\x4d\x60\x29\x74\xe3\x19\x3c\x97\x72\x89\x86\x6d\x69\xa0\x43\x0d" +
	"\xe9\xf3\xe2\xa3\x40\x8f\x8c\xca\xa5\xa4\x95\x83\xf2\x73\xf6\x69\xcf\xca\x32\xb7\x29\xfc\x5d\x60\x57\xca\xdf\xe9" +
	"\xdd\x45\x3a\x6b\xea\x56\x31\xce\x1d\x0c\x7c\x11\x4a\x30\x0f\xf0\xa2\x64\x64\x07\xd5\xcc\xaa\xa0\x34\x43\x28\xf2" +
	"\x3e\xd0\x27\x1d\xfa\x47\x11\xc0\x95\x92\xf8\xc9\x01\x59\x00\x96\xc2\x06\xb8\xdf\x46\x32\x4d\x24\xab\xa4\xc8\xfb" +
	"\x8e\x93\x62\xde\x98\xa7\xad\x98\x40\x33\x36\x5e\x68\xa7\x88\x4a\x19\x1b\xdd\x6e\x1a\x3f\xeb\x75\xf6\x53\xd5\xb0" +
	"\xd9\xf4\xc5\xf9\xb6\x7a\x5c\x6b\xdb\x81\xb2\xa0\x56\xed\x32\x7a\x11\x02\x78\x96\xd5\x7a\x9d\xcd\xfa\xdf\xdf\xaf" +
	"\x37\x9b\x22\x8f\x45\x47\x34\xe4\x14\x59\x59\xe5\xff\x2d\xaa\xd5\xea\xd9\xf4\x4a\xad\x0e\x0d\x27\x60\xa9\x05\x30" +
	"\xc7\x78\x3b\xe5\x16\xf0\x6c\x7c\x13\xcb\x76\xc6\x7b\x45\x0b\x8f\x2c\xab\x7b\x7e\xc7\xa6\xfd\x64\x30\x76\xfb\x67" +
	"\x4c\xf8\xe0\x45\xf6\x63\x97\x7c\xdb\x71\x13\x2b\xa6\x61\x07\x06\xbb\x97\xdc\xdc\x35\xfa\x51\x10\x87\x41\xfe\xb0" +
	"\x86\x74\x13\xfa\x26\x2f\xe6\xe8\x90\x9f\x6e\x62\x80\x32\xe2\x10\x1b\x36\xd8\x1d\xd7\xd6\x8d\x89\xca\x1e\x7c\x28" +
	"\xbf\x6a\xcc\xb8\xc3\xe1\xf2\x15\xac\x81\xd5\x09\xb0\x06\x56\x67\xc2\x8e\x39\x4c\xc2\xea\xc6\x9f\x00\xab\x1b\x7f" +
	"\x26\xec\x98\xc3\x24\x2c\xc6\x7f\xde\xbb\x61\xd1\xf3\x99\xb0\x63\x0e\x93\xb0\x4b\xa4\x13\x60\x97\x48\x67\xc2\x8e" +
	"\x39\x4c\x8f\x81\x55\xa7\x8c\x81\x55\xe7\x8e\xc1\x88\xc3\x60\x39\x75\x71\x3c\xa2\x73\xb4\x7f\xcb\xdf\xc4\xd8\xad" +
	"\x9a\xbb\x37\x5e\x3e\xb0\xe2\xa0\xf6\x2d\x2e\x63\xe8\xb5\xba\xc8\xfb\xd7\x26\x3e\x3f\xf1\x25\xfe\x17\x00\x00\xff" +
	"\xff\xa2\x9f\x52\x2e\x99\x07\x00\x00")

func bindataCharacterhtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataCharacterhtml,
		"character.html",
	)
}



func bindataCharacterhtml() (*asset, error) {
	bytes, err := bindataCharacterhtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "character.html",
		size: 1945,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1556390364, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"character.html": bindataCharacterhtml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"character.html": {Func: bindataCharacterhtml, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
