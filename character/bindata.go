// Code generated by go-bindata. DO NOT EDIT.
// sources:
// character.html

package character


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataCharacterhtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x95\x41\x6f\xd3\x30\x14\xc7\xef\xf9\x14\xc6\x67\xd2\xc0\x8d\x83\x13" +
	"\x69\x2a\x43\x5c\x06\x93\xd8\x24\x38\xbe\xda\x4f\xf3\x13\x8e\x5d\xec\xb7\x34\x53\xd5\xef\x8e\xdc\x74\x28\x6b\x33" +
	"\x22\x42\x2f\x8d\xfd\xfe\xbf\x97\x5f\xe4\xe8\x45\xbd\xf9\xf8\x75\x7d\xf7\xe3\xf6\x5a\x58\x6e\x5d\x53\xa8\xfc\x27" +
	"\x1c\xf8\x87\x5a\xa2\x97\x4d\x51\x28\x8b\x60\x9a\x42\x08\x21\x54\x8b\x0c\x42\x5b\x88\x09\xb9\x96\xf7\x77\x9f\xca" +
	"\x0f\x72\x5c\xf2\xd0\x62\x2d\x3b\xc2\xdd\x36\x44\x96\x42\x07\xcf\xe8\xb9\x96\x3b\x32\x6c\x6b\x83\x1d\x69\x2c\x8f" +
	"\x8b\xb7\x82\x3c\x31\x81\x2b\x93\x06\x87\xf5\xfb\xd5\xbb\x17\xad\x2c\xf3\xb6\xc4\x5f\x8f\xd4\xd5\xf2\x7b\x79\x7f" +
	"\x55\xae\x43\xbb\x05\xa6\x8d\xc3\x51\x5f\xc2\x1a\xcd\x03\x3e\x93\x4c\xec\xb0\x59\x5b\x88\xa0\x19\xa3\xaa\x86\x8d" +
	"\x42\x55\xc3\x43\x14\x6a\x13\xcc\xd3\x29\x9c\x50\x33\x05\x2f\xb4\x83\x94\x6a\x99\xdd\x4f\x7d\xf2\x6f\xbf\x5f\x7d" +
	"\x81\x16\x0f\x87\x21\x5c\x9d\xd2\xd3\xac\xdd\x8e\x48\x95\xb6\xf0\xa7\xa2\x1f\x63\x44\xcf\xb2\xd9\xef\x57\xeb\xe1" +
	"\xfa\xf3\xed\xe1\xa0\xaa\x1c\x7a\x85\x49\x0e\x92\x95\x4d\xf5\xd7\x50\x0b\xfd\xb1\xe9\x0d\xf4\xe7\x0d\x67\x64\x13" +
	"\x03\xa7\xb1\xaf\xa1\xee\xb9\xb6\x71\x41\xff\x14\x89\xe3\xa8\x7e\x9e\x49\x3a\x44\x3c\xde\xfb\x6a\x43\x8e\xf8\xe9" +
	"\x5b\xde\x48\xab\xc4\x31\x7b\x18\xea\x5e\x67\xdb\x60\x2e\xc8\x9b\x60\xa6\xe1\xf3\xe5\x85\xa7\xc1\x7e\x81\xa7\xc1" +
	"\x7e\xb9\xe7\x14\x3c\xeb\xa9\x83\x5f\xe0\xa9\x83\x5f\xee\x39\x05\xcf\x7a\x52\x7e\x51\xff\xd9\x93\x3c\x2f\xf7\x9c" +
	"\x82\x67\x3d\x77\x94\x16\x78\xee\x28\x2d\xf7\x9c\x82\xe7\xcf\xdd\xc2\x92\x73\xb7\xf0\x1f\xe7\x3e\x01\x8f\x96\x33" +
	"\xa3\x01\x7b\x8e\xf0\x72\x08\x5e\xe7\xad\xcb\x29\xa8\xaa\x61\x92\xe6\xd1\x9a\x3f\x1c\xbf\x03\x00\x00\xff\xff\x1d" +
	"\x8e\x9d\x6e\x48\x06\x00\x00")

func bindataCharacterhtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataCharacterhtml,
		"character.html",
	)
}



func bindataCharacterhtml() (*asset, error) {
	bytes, err := bindataCharacterhtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "character.html",
		size: 1608,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1556199201, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"character.html": bindataCharacterhtml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"character.html": {Func: bindataCharacterhtml, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
