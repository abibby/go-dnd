// Code generated by go-bindata. DO NOT EDIT.
// sources:
// character.html

package character


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataCharacterhtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x95\x41\x8f\xda\x30\x10\x85\xef\xf9\x15\xae\xcf\x0d\x69\x6f\x3d\x24" +
	"\x91\x56\x74\xab\xf6\xb0\xed\x4a\xb0\x52\x7b\x1c\xec\x29\x19\xad\x63\xa7\xf1\x10\x58\x21\xfe\x7b\x65\xc2\xa2\xc0" +
	"\x86\xcd\x2e\xe1\x02\x9e\x79\xef\xf1\x4d\x30\x76\xfa\xe1\xeb\xaf\xe9\xfc\xcf\xfd\xad\x28\xb8\x34\x79\x94\x86\x37" +
	"\x61\xc0\x2e\x33\x89\x56\xe6\x51\x94\x16\x08\x3a\x8f\x84\x10\x22\x2d\x91\x41\xa8\x02\x6a\x8f\x9c\xc9\x87\xf9\xb7" +
	"\xf8\x8b\xec\xb6\x2c\x94\x98\xc9\x86\x70\x5d\xb9\x9a\xa5\x50\xce\x32\x5a\xce\xe4\x9a\x34\x17\x99\xc6\x86\x14\xc6" +
	"\xfb\xc5\x47\x41\x96\x98\xc0\xc4\x5e\x81\xc1\xec\xf3\xe4\xd3\x49\x54\xc1\x5c\xc5\xf8\x6f\x45\x4d\x26\x7f\xc7\x0f" +
	"\x37\xf1\xd4\x95\x15\x30\x2d\x0c\x76\x72\x09\x33\xd4\x4b\x7c\x76\x32\xb1\xc1\x7c\x5a\x40\x0d\x8a\xb1\x4e\x93\xb6" +
	"\x10\xa5\x49\x3b\x44\x94\x2e\x9c\x7e\x3a\x88\x3d\x2a\x26\x67\x85\x32\xe0\x7d\x26\x03\xfb\x21\x27\xbc\xb6\xdb\xc9" +
	"\x4f\x28\x71\xb7\x6b\xc5\xc9\x41\xdd\xef\x2d\xaa\x8e\x33\xf5\x15\x1c\x3b\x6a\x55\xd7\x68\x59\xe6\xdb\xed\x64\xda" +
	"\x7e\xfe\x7e\xbf\xdb\xa5\x49\x10\x5d\xf0\x78\x03\xbe\x90\x79\xf2\xaa\xa8\x84\xcd\x3e\xf4\x0e\x36\xe7\x81\x03\xb0" +
	"\xbe\x42\xd4\x97\x78\x1b\x30\x2b\xdc\x07\xcf\x82\xec\x18\x7c\x22\x5a\x59\x62\x99\xff\xe5\x77\x7c\x69\xfb\x63\x33" +
	"\x35\xa7\xcf\xd8\xd3\xd2\x8a\xc9\x8f\x63\xf3\x6d\x8f\xdb\x33\xb0\xef\x4e\xa0\xa9\x79\xee\x2d\x8c\x53\x8f\xc2\x73" +
	"\xdd\xe9\x9f\x6b\xbc\x72\x75\x3b\xe4\xcd\x82\x0c\xf1\xd3\x2c\x14\xfc\xc4\x73\x1d\x06\xd6\xd4\x5c\xf6\x96\x4e\x07" +
	"\x67\x0b\xde\xb5\xdf\x39\xdd\x9f\x70\xbe\x7c\x01\xab\x71\x73\x05\xac\xc6\xcd\x48\xd8\xbe\x84\x41\x58\xe5\xec\x15" +
	"\xb0\xca\xd9\x91\xb0\x7d\x09\x83\xb0\x14\xfe\x79\xef\x86\x25\xcb\x23\x61\xfb\x12\x06\x61\xd7\xe4\xaf\x80\x5d\x93" +
	"\x1f\x09\xdb\x97\x30\xbc\x0d\x0a\xb8\x66\x1b\x14\x30\x76\x1b\xf4\x24\x74\x96\x43\x07\xc7\x23\x19\xe3\x4f\x4f\xf9" +
	"\x59\xa8\xcd\x61\x61\xde\x78\xf8\xe0\x86\x6b\x38\x8d\xb8\x0d\xa5\x97\xee\x34\x69\x6f\x9b\x70\xfd\x84\xcb\xf5\x7f" +
	"\x00\x00\x00\xff\xff\x5f\x6d\x61\x94\x6c\x07\x00\x00")

func bindataCharacterhtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataCharacterhtml,
		"character.html",
	)
}



func bindataCharacterhtml() (*asset, error) {
	bytes, err := bindataCharacterhtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "character.html",
		size: 1900,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1556380237, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"character.html": bindataCharacterhtml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"character.html": {Func: bindataCharacterhtml, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
